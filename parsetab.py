
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ACCEPT_NULL AND_ASSIGN AS ASSERT ASSIGN ASYNC AWAIT BASE BITWISE_AND BITWISE_OR BITWISE_XOR BOOL_TYPE BREAK CASE CATCH CLASS COLON COMMA COMMENT CONST CONTINUE COVARIANT DEFAULT DEFERRED DIVIDE DIV_ASSIGN DO DOLLAR DOT DOUBLE DOUBLE_TYPE DYNAMIC ELSE ENUM EQUALS EXPORT EXTENDS EXTENSION EXTERNAL FACTORY FALSE FINAL FINALLY FOR FUNCTION FUNC_START GET HIDE IF IF_NULL IMPLEMENTS IMPORT IN INTEGER INTERFACE INT_TYPE IS LATE LBRACE LBRACKET LESS_EQUAL LESS_THAN LIBRARY LIST_TYPE LOGICAL_AND LOGICAL_OR LPAREN LSHIFT_ASSIGN MAP_TYPE MINUS MIXIN MOD MOD_ASSIGN MORE_EQUAL MORE_THAN MULTILINE_COMMENT MUL_ASSIGN NEW NOT NOT_EQUAL NULL NUM_TYPE OF ON OPERATOR OR_ASSIGN PART PLUS RBRACE RBRACKET REQUIRED RETHROW RETURN RPAREN RSHIFT_ASSIGN RUNES_TYPE RUNSIGNED_SHIFT_ASSIGN SEALED SEMICOLON SET SET_TYPE SHOW STATIC STRING STRING_TYPE SUB_ASSIGN SUM_ASSIGN SUPER SWITCH SYMBOL_TYPE SYNC THIS THROW TIMES TRUE TRY TYPE TYPEDEF VARIABLE VAR_TYPE VOID WHEN WHILE WITH XOR_ASSIGN YIELD\n    body : instruction SEMICOLON body\n         | instruction SEMICOLON\n         | functionDeclaration body\n         | functionDeclaration\n    \n    import : IMPORT STRING\n    \n    instruction : functionCall\n                | variableDeclarationUninitialized\n                | variableDeclarationInitialized\n                | variableMutation\n                | import\n    \n    non_nullable_datatype : INT_TYPE\n             | DOUBLE_TYPE\n             | NUM_TYPE\n             | BOOL_TYPE\n             | STRING_TYPE\n             | LIST_TYPE\n             | MAP_TYPE\n             | SET_TYPE\n             | RUNES_TYPE\n             | SYMBOL_TYPE\n             | VAR_TYPE\n    \n    nullable_datatype : non_nullable_datatype ACCEPT_NULL\n    \n    datatype : nullable_datatype\n             | non_nullable_datatype\n             | recordTypes\n    \n    variableDeclarationUninitialized : datatype VARIABLE\n    \n    variableInitialization : ASSIGN value\n                           | ASSIGN functionCall\n    \n    variableDeclarationInitialized : variableDeclarationUninitialized variableInitialization\n    \n    immediateAssign : SUM_ASSIGN\n                    | SUB_ASSIGN\n                    | MUL_ASSIGN\n                    | DIV_ASSIGN\n                    | MOD_ASSIGN\n                    | AND_ASSIGN\n                    | OR_ASSIGN\n                    | XOR_ASSIGN\n                    | LSHIFT_ASSIGN\n                    | RSHIFT_ASSIGN\n                    | RUNSIGNED_SHIFT_ASSIGN\n    \n    variableMutation : VARIABLE variableInitialization\n                     | VARIABLE immediateAssign value\n    \n    functionCall : prototype    \n                 | VARIABLE DOT prototype\n    \n    functionDeclaration : datatype FUNC_START parameters RPAREN LBRACE body RBRACE\n    \n    parameters : datatype VARIABLE COMMA parameters\n               | datatype VARIABLE\n    \n    values : value COMMA values\n           | value\n    \n    prototype : FUNC_START values RPAREN\n              | FUNC_START RPAREN\n    \n    object : NEW prototype\n    \n    boolean : TRUE\n            | FALSE\n    \n    number : INTEGER\n           | DOUBLE\n    \n    arithmeticOperator : PLUS\n                       | MINUS\n                       | TIMES\n                       | DIVIDE\n                       | MOD\n    \n    logicOperator : LOGICAL_AND\n                  | LOGICAL_OR\n    \n    bitwiseOperator : BITWISE_AND\n                    | BITWISE_OR\n                    | BITWISE_XOR\n    \n    value : number\n          | MINUS number\n          | object\n          | arithmeticExpression\n          | MINUS LPAREN arithmeticExpression RPAREN\n          | bitwiseExpression\n          | MINUS LPAREN bitwiseExpression RPAREN\n          | logicExpression\n          | NOT LPAREN logicExpression RPAREN\n          | STRING\n          | VARIABLE\n          | NOT VARIABLE\n          | boolean\n          | NOT boolean\n          | variableValuePair\n          | tuple\n    \n    logicExpression : value logicOperator value\n                    | LPAREN value logicOperator value RPAREN\n    \n    arithmeticExpression : value arithmeticOperator value\n                         | LPAREN value arithmeticOperator value RPAREN\n    \n    bitwiseExpression : value bitwiseOperator value\n                      | LPAREN value bitwiseOperator value RPAREN\n    \n    recordTypes : LPAREN multipleDatatypes RPAREN\n                | LPAREN parameters RPAREN\n                | LPAREN LBRACE recordTypeAnnotation RBRACE RPAREN\n    \n    recordTypeAnnotation : datatype VARIABLE COMMA recordTypeAnnotation\n                         | datatype VARIABLE\n    \n    multipleDatatypes : datatype COMMA multipleDatatypes\n                      | datatype\n    \n    variableValuePair : VARIABLE COLON value\n    \n    tuple : LPAREN values RPAREN\n    '
    
_lr_action_items = {'VARIABLE':([0,3,9,10,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,32,42,45,58,59,60,61,62,63,64,65,66,67,68,69,71,75,80,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,104,108,109,111,122,123,124,126,135,143,151,],[12,12,34,47,-23,-24,-25,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,12,79,47,102,47,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-22,113,113,47,47,47,47,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,47,47,47,-89,-90,131,47,47,47,47,12,-91,-45,]),'IMPORT':([0,3,29,135,151,],[13,13,13,13,-45,]),'FUNC_START':([0,3,9,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,32,53,56,71,108,109,135,143,151,],[10,10,33,-23,-24,-25,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,10,10,10,10,-22,-89,-90,10,-91,-45,]),'INT_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[17,17,17,17,17,17,17,17,17,17,-45,]),'DOUBLE_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[18,18,18,18,18,18,18,18,18,18,-45,]),'NUM_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[19,19,19,19,19,19,19,19,19,19,-45,]),'BOOL_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[20,20,20,20,20,20,20,20,20,20,-45,]),'STRING_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[21,21,21,21,21,21,21,21,21,21,-45,]),'LIST_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[22,22,22,22,22,22,22,22,22,22,-45,]),'MAP_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[23,23,23,23,23,23,23,23,23,23,-45,]),'SET_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[24,24,24,24,24,24,24,24,24,24,-45,]),'RUNES_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[25,25,25,25,25,25,25,25,25,25,-45,]),'SYMBOL_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[26,26,26,26,26,26,26,26,26,26,-45,]),'VAR_TYPE':([0,3,28,29,33,74,112,134,135,144,151,],[27,27,27,27,27,27,27,27,27,27,-45,]),'LPAREN':([0,3,10,28,29,32,33,39,42,45,58,59,60,61,62,63,64,65,66,67,68,69,74,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,104,112,122,123,124,126,134,135,144,151,],[28,28,42,28,28,42,28,98,42,101,42,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,28,42,42,42,42,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,42,126,42,28,42,42,42,42,28,28,28,-45,]),'$end':([1,3,29,30,76,151,],[0,-4,-2,-3,-1,-45,]),'SEMICOLON':([2,4,5,6,7,8,11,31,34,36,38,40,41,43,44,46,47,48,49,50,51,52,54,55,57,70,77,78,79,82,97,102,103,105,106,107,116,117,118,125,129,136,137,142,147,148,149,],[29,-6,-7,-8,-9,-10,-43,-29,-26,-51,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,-41,-5,-27,-28,-77,-50,-68,-78,-80,-52,-44,-42,-85,-87,-83,-97,-96,-71,-73,-75,-86,-88,-84,]),'RBRACE':([3,29,30,76,110,131,146,150,151,],[-4,-2,-3,-1,130,-93,151,-92,-45,]),'ASSIGN':([5,12,34,],[32,32,-26,]),'RPAREN':([10,14,15,16,17,18,19,20,21,22,23,24,25,26,27,35,36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,71,72,73,75,81,82,97,99,100,102,103,105,108,109,113,115,116,117,118,119,120,125,127,129,130,132,133,136,137,138,139,140,141,142,143,145,147,148,149,],[36,-23,-24,-25,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,82,-51,-49,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,-22,108,109,-95,114,-50,-68,-49,125,-78,-80,-52,-89,-90,-47,-48,-85,-87,-83,136,137,-97,142,-96,143,-95,-94,-71,-73,147,148,149,-49,-75,-91,-46,-86,-88,-84,]),'MINUS':([10,32,36,37,38,40,41,42,43,44,46,47,48,49,50,51,52,54,55,58,59,60,61,62,63,64,65,66,67,68,69,77,79,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,107,116,117,118,119,120,121,122,123,124,125,126,127,128,129,136,137,138,139,140,141,142,147,148,149,],[39,39,-51,88,-67,-69,-70,39,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,39,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,88,-77,-50,39,39,39,39,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,-68,39,88,39,-78,-80,39,-52,88,88,88,88,-70,-72,88,39,39,39,-97,39,-74,88,88,-71,-73,88,88,88,88,-75,-86,-88,-84,]),'NOT':([10,32,42,58,59,60,61,62,63,64,65,66,67,68,69,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,104,122,123,124,126,],[45,45,45,45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,45,45,45,45,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,45,45,45,45,45,45,45,]),'STRING':([10,13,32,42,58,59,60,61,62,63,64,65,66,67,68,69,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,104,122,123,124,126,],[46,70,46,46,46,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,46,46,46,46,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,46,46,46,46,46,46,46,]),'INTEGER':([10,32,39,42,58,59,60,61,62,63,64,65,66,67,68,69,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,104,122,123,124,126,],[51,51,51,51,51,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,51,51,51,51,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,51,51,51,51,51,51,51,]),'DOUBLE':([10,32,39,42,58,59,60,61,62,63,64,65,66,67,68,69,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,104,122,123,124,126,],[52,52,52,52,52,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,52,52,52,52,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,52,52,52,52,52,52,52,]),'NEW':([10,32,42,58,59,60,61,62,63,64,65,66,67,68,69,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,104,122,123,124,126,],[53,53,53,53,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,53,53,53,53,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,53,53,53,53,53,53,53,]),'TRUE':([10,32,42,45,58,59,60,61,62,63,64,65,66,67,68,69,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,104,122,123,124,126,],[54,54,54,54,54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,54,54,54,54,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,54,54,54,54,54,54,54,]),'FALSE':([10,32,42,45,58,59,60,61,62,63,64,65,66,67,68,69,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,104,122,123,124,126,],[55,55,55,55,55,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,55,55,55,55,-57,-58,-59,-60,-61,-64,-65,-66,-62,-63,55,55,55,55,55,55,55,]),'DOT':([12,79,],[56,56,]),'SUM_ASSIGN':([12,],[59,]),'SUB_ASSIGN':([12,],[60,]),'MUL_ASSIGN':([12,],[61,]),'DIV_ASSIGN':([12,],[62,]),'MOD_ASSIGN':([12,],[63,]),'AND_ASSIGN':([12,],[64,]),'OR_ASSIGN':([12,],[65,]),'XOR_ASSIGN':([12,],[66,]),'LSHIFT_ASSIGN':([12,],[67,]),'RSHIFT_ASSIGN':([12,],[68,]),'RUNSIGNED_SHIFT_ASSIGN':([12,],[69,]),'COMMA':([14,15,16,17,18,19,20,21,22,23,24,25,26,27,36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,71,75,82,97,99,102,103,105,108,109,113,116,117,118,125,129,131,132,136,137,138,139,140,141,142,143,147,148,149,],[-23,-24,-25,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-51,83,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,-22,112,-50,-68,83,-78,-80,-52,-89,-90,134,-85,-87,-83,-97,-96,144,112,-71,-73,-85,-87,-83,83,-75,-91,-86,-88,-84,]),'ACCEPT_NULL':([15,17,18,19,20,21,22,23,24,25,26,27,],[71,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,]),'LBRACE':([28,114,],[74,135,]),'PLUS':([36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,77,79,82,97,99,102,103,105,107,116,117,118,119,120,121,125,127,128,129,136,137,138,139,140,141,142,147,148,149,],[-51,87,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,87,-77,-50,-68,87,-78,-80,-52,87,87,87,87,-70,-72,87,-97,-74,87,87,-71,-73,87,87,87,87,-75,-86,-88,-84,]),'TIMES':([36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,77,79,82,97,99,102,103,105,107,116,117,118,119,120,121,125,127,128,129,136,137,138,139,140,141,142,147,148,149,],[-51,89,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,89,-77,-50,-68,89,-78,-80,-52,89,89,89,89,-70,-72,89,-97,-74,89,89,-71,-73,89,89,89,89,-75,-86,-88,-84,]),'DIVIDE':([36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,77,79,82,97,99,102,103,105,107,116,117,118,119,120,121,125,127,128,129,136,137,138,139,140,141,142,147,148,149,],[-51,90,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,90,-77,-50,-68,90,-78,-80,-52,90,90,90,90,-70,-72,90,-97,-74,90,90,-71,-73,90,90,90,90,-75,-86,-88,-84,]),'MOD':([36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,77,79,82,97,99,102,103,105,107,116,117,118,119,120,121,125,127,128,129,136,137,138,139,140,141,142,147,148,149,],[-51,91,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,91,-77,-50,-68,91,-78,-80,-52,91,91,91,91,-70,-72,91,-97,-74,91,91,-71,-73,91,91,91,91,-75,-86,-88,-84,]),'BITWISE_AND':([36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,77,79,82,97,99,102,103,105,107,116,117,118,119,120,121,125,127,128,129,136,137,138,139,140,141,142,147,148,149,],[-51,92,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,92,-77,-50,-68,92,-78,-80,-52,92,92,92,92,-70,-72,92,-97,-74,92,92,-71,-73,92,92,92,92,-75,-86,-88,-84,]),'BITWISE_OR':([36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,77,79,82,97,99,102,103,105,107,116,117,118,119,120,121,125,127,128,129,136,137,138,139,140,141,142,147,148,149,],[-51,93,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,93,-77,-50,-68,93,-78,-80,-52,93,93,93,93,-70,-72,93,-97,-74,93,93,-71,-73,93,93,93,93,-75,-86,-88,-84,]),'BITWISE_XOR':([36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,77,79,82,97,99,102,103,105,107,116,117,118,119,120,121,125,127,128,129,136,137,138,139,140,141,142,147,148,149,],[-51,94,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,94,-77,-50,-68,94,-78,-80,-52,94,94,94,94,-70,-72,94,-97,-74,94,94,-71,-73,94,94,94,94,-75,-86,-88,-84,]),'LOGICAL_AND':([36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,77,79,82,97,99,102,103,105,107,116,117,118,119,120,121,125,127,128,129,136,137,138,139,140,141,142,147,148,149,],[-51,95,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,95,-77,-50,-68,95,-78,-80,-52,95,95,95,95,-70,-72,95,-97,-74,95,95,-71,-73,95,95,95,95,-75,-86,-88,-84,]),'LOGICAL_OR':([36,37,38,40,41,43,44,46,47,48,49,50,51,52,54,55,77,79,82,97,99,102,103,105,107,116,117,118,119,120,121,125,127,128,129,136,137,138,139,140,141,142,147,148,149,],[-51,96,-67,-69,-70,-72,-74,-76,-77,-79,-81,-82,-55,-56,-53,-54,96,-77,-50,-68,96,-78,-80,-52,96,96,96,96,-70,-72,96,-97,-74,96,96,-71,-73,96,96,96,96,-75,-86,-88,-84,]),'COLON':([47,79,],[104,104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,3,29,135,],[1,30,76,146,]),'instruction':([0,3,29,135,],[2,2,2,2,]),'functionDeclaration':([0,3,29,135,],[3,3,3,3,]),'functionCall':([0,3,29,32,135,],[4,4,4,78,4,]),'variableDeclarationUninitialized':([0,3,29,135,],[5,5,5,5,]),'variableDeclarationInitialized':([0,3,29,135,],[6,6,6,6,]),'variableMutation':([0,3,29,135,],[7,7,7,7,]),'import':([0,3,29,135,],[8,8,8,8,]),'datatype':([0,3,28,29,33,74,112,134,135,144,],[9,9,75,9,80,111,132,80,9,111,]),'prototype':([0,3,29,32,53,56,135,],[11,11,11,11,105,106,11,]),'nullable_datatype':([0,3,28,29,33,74,112,134,135,144,],[14,14,14,14,14,14,14,14,14,14,]),'non_nullable_datatype':([0,3,28,29,33,74,112,134,135,144,],[15,15,15,15,15,15,15,15,15,15,]),'recordTypes':([0,3,28,29,33,74,112,134,135,144,],[16,16,16,16,16,16,16,16,16,16,]),'variableInitialization':([5,12,],[31,57,]),'values':([10,42,83,126,],[35,100,115,100,]),'value':([10,32,42,58,83,84,85,86,98,101,104,122,123,124,126,],[37,77,99,107,37,116,117,118,121,128,129,138,139,140,141,]),'number':([10,32,39,42,58,83,84,85,86,98,101,104,122,123,124,126,],[38,38,97,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'object':([10,32,42,58,83,84,85,86,98,101,104,122,123,124,126,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'arithmeticExpression':([10,32,42,58,83,84,85,86,98,101,104,122,123,124,126,],[41,41,41,41,41,41,41,41,119,41,41,41,41,41,41,]),'bitwiseExpression':([10,32,42,58,83,84,85,86,98,101,104,122,123,124,126,],[43,43,43,43,43,43,43,43,120,43,43,43,43,43,43,]),'logicExpression':([10,32,42,58,83,84,85,86,98,101,104,122,123,124,126,],[44,44,44,44,44,44,44,44,44,127,44,44,44,44,44,]),'boolean':([10,32,42,45,58,83,84,85,86,98,101,104,122,123,124,126,],[48,48,48,103,48,48,48,48,48,48,48,48,48,48,48,48,]),'variableValuePair':([10,32,42,58,83,84,85,86,98,101,104,122,123,124,126,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'tuple':([10,32,42,58,83,84,85,86,98,101,104,122,123,124,126,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'immediateAssign':([12,],[58,]),'multipleDatatypes':([28,112,],[72,133,]),'parameters':([28,33,134,],[73,81,145,]),'arithmeticOperator':([37,77,99,107,116,117,118,121,128,129,138,139,140,141,],[84,84,122,84,84,84,84,84,84,84,84,84,84,122,]),'bitwiseOperator':([37,77,99,107,116,117,118,121,128,129,138,139,140,141,],[85,85,123,85,85,85,85,85,85,85,85,85,85,123,]),'logicOperator':([37,77,99,107,116,117,118,121,128,129,138,139,140,141,],[86,86,124,86,86,86,86,86,86,86,86,86,86,124,]),'recordTypeAnnotation':([74,144,],[110,150,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> instruction SEMICOLON body','body',3,'p_body','sintactico.py',6),
  ('body -> instruction SEMICOLON','body',2,'p_body','sintactico.py',7),
  ('body -> functionDeclaration body','body',2,'p_body','sintactico.py',8),
  ('body -> functionDeclaration','body',1,'p_body','sintactico.py',9),
  ('import -> IMPORT STRING','import',2,'p_import','sintactico.py',14),
  ('instruction -> functionCall','instruction',1,'p_instruction','sintactico.py',19),
  ('instruction -> variableDeclarationUninitialized','instruction',1,'p_instruction','sintactico.py',20),
  ('instruction -> variableDeclarationInitialized','instruction',1,'p_instruction','sintactico.py',21),
  ('instruction -> variableMutation','instruction',1,'p_instruction','sintactico.py',22),
  ('instruction -> import','instruction',1,'p_instruction','sintactico.py',23),
  ('non_nullable_datatype -> INT_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',28),
  ('non_nullable_datatype -> DOUBLE_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',29),
  ('non_nullable_datatype -> NUM_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',30),
  ('non_nullable_datatype -> BOOL_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',31),
  ('non_nullable_datatype -> STRING_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',32),
  ('non_nullable_datatype -> LIST_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',33),
  ('non_nullable_datatype -> MAP_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',34),
  ('non_nullable_datatype -> SET_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',35),
  ('non_nullable_datatype -> RUNES_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',36),
  ('non_nullable_datatype -> SYMBOL_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',37),
  ('non_nullable_datatype -> VAR_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',38),
  ('nullable_datatype -> non_nullable_datatype ACCEPT_NULL','nullable_datatype',2,'p_nullable_datatype','sintactico.py',43),
  ('datatype -> nullable_datatype','datatype',1,'p_datatype','sintactico.py',48),
  ('datatype -> non_nullable_datatype','datatype',1,'p_datatype','sintactico.py',49),
  ('datatype -> recordTypes','datatype',1,'p_datatype','sintactico.py',50),
  ('variableDeclarationUninitialized -> datatype VARIABLE','variableDeclarationUninitialized',2,'p_variableDeclarationUninitialized','sintactico.py',55),
  ('variableInitialization -> ASSIGN value','variableInitialization',2,'p_variableInitialization','sintactico.py',60),
  ('variableInitialization -> ASSIGN functionCall','variableInitialization',2,'p_variableInitialization','sintactico.py',61),
  ('variableDeclarationInitialized -> variableDeclarationUninitialized variableInitialization','variableDeclarationInitialized',2,'p_variableDeclarationInitialized','sintactico.py',66),
  ('immediateAssign -> SUM_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',71),
  ('immediateAssign -> SUB_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',72),
  ('immediateAssign -> MUL_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',73),
  ('immediateAssign -> DIV_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',74),
  ('immediateAssign -> MOD_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',75),
  ('immediateAssign -> AND_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',76),
  ('immediateAssign -> OR_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',77),
  ('immediateAssign -> XOR_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',78),
  ('immediateAssign -> LSHIFT_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',79),
  ('immediateAssign -> RSHIFT_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',80),
  ('immediateAssign -> RUNSIGNED_SHIFT_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',81),
  ('variableMutation -> VARIABLE variableInitialization','variableMutation',2,'p_variableMutation','sintactico.py',86),
  ('variableMutation -> VARIABLE immediateAssign value','variableMutation',3,'p_variableMutation','sintactico.py',87),
  ('functionCall -> prototype','functionCall',1,'p_functionCall','sintactico.py',92),
  ('functionCall -> VARIABLE DOT prototype','functionCall',3,'p_functionCall','sintactico.py',93),
  ('functionDeclaration -> datatype FUNC_START parameters RPAREN LBRACE body RBRACE','functionDeclaration',7,'p_functionDeclaration','sintactico.py',98),
  ('parameters -> datatype VARIABLE COMMA parameters','parameters',4,'p_parameters','sintactico.py',103),
  ('parameters -> datatype VARIABLE','parameters',2,'p_parameters','sintactico.py',104),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',109),
  ('values -> value','values',1,'p_values','sintactico.py',110),
  ('prototype -> FUNC_START values RPAREN','prototype',3,'p_prototype','sintactico.py',115),
  ('prototype -> FUNC_START RPAREN','prototype',2,'p_prototype','sintactico.py',116),
  ('object -> NEW prototype','object',2,'p_object','sintactico.py',121),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',126),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',127),
  ('number -> INTEGER','number',1,'p_number','sintactico.py',132),
  ('number -> DOUBLE','number',1,'p_number','sintactico.py',133),
  ('arithmeticOperator -> PLUS','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',138),
  ('arithmeticOperator -> MINUS','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',139),
  ('arithmeticOperator -> TIMES','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',140),
  ('arithmeticOperator -> DIVIDE','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',141),
  ('arithmeticOperator -> MOD','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',142),
  ('logicOperator -> LOGICAL_AND','logicOperator',1,'p_logicOperator','sintactico.py',147),
  ('logicOperator -> LOGICAL_OR','logicOperator',1,'p_logicOperator','sintactico.py',148),
  ('bitwiseOperator -> BITWISE_AND','bitwiseOperator',1,'p_bitwiseOperator','sintactico.py',153),
  ('bitwiseOperator -> BITWISE_OR','bitwiseOperator',1,'p_bitwiseOperator','sintactico.py',154),
  ('bitwiseOperator -> BITWISE_XOR','bitwiseOperator',1,'p_bitwiseOperator','sintactico.py',155),
  ('value -> number','value',1,'p_value','sintactico.py',160),
  ('value -> MINUS number','value',2,'p_value','sintactico.py',161),
  ('value -> object','value',1,'p_value','sintactico.py',162),
  ('value -> arithmeticExpression','value',1,'p_value','sintactico.py',163),
  ('value -> MINUS LPAREN arithmeticExpression RPAREN','value',4,'p_value','sintactico.py',164),
  ('value -> bitwiseExpression','value',1,'p_value','sintactico.py',165),
  ('value -> MINUS LPAREN bitwiseExpression RPAREN','value',4,'p_value','sintactico.py',166),
  ('value -> logicExpression','value',1,'p_value','sintactico.py',167),
  ('value -> NOT LPAREN logicExpression RPAREN','value',4,'p_value','sintactico.py',168),
  ('value -> STRING','value',1,'p_value','sintactico.py',169),
  ('value -> VARIABLE','value',1,'p_value','sintactico.py',170),
  ('value -> NOT VARIABLE','value',2,'p_value','sintactico.py',171),
  ('value -> boolean','value',1,'p_value','sintactico.py',172),
  ('value -> NOT boolean','value',2,'p_value','sintactico.py',173),
  ('value -> variableValuePair','value',1,'p_value','sintactico.py',174),
  ('value -> tuple','value',1,'p_value','sintactico.py',175),
  ('logicExpression -> value logicOperator value','logicExpression',3,'p_logicExpression','sintactico.py',180),
  ('logicExpression -> LPAREN value logicOperator value RPAREN','logicExpression',5,'p_logicExpression','sintactico.py',181),
  ('arithmeticExpression -> value arithmeticOperator value','arithmeticExpression',3,'p_arithmeticExpression','sintactico.py',186),
  ('arithmeticExpression -> LPAREN value arithmeticOperator value RPAREN','arithmeticExpression',5,'p_arithmeticExpression','sintactico.py',187),
  ('bitwiseExpression -> value bitwiseOperator value','bitwiseExpression',3,'p_bitwiseExpression','sintactico.py',192),
  ('bitwiseExpression -> LPAREN value bitwiseOperator value RPAREN','bitwiseExpression',5,'p_bitwiseExpression','sintactico.py',193),
  ('recordTypes -> LPAREN multipleDatatypes RPAREN','recordTypes',3,'p_recordTypes','sintactico.py',198),
  ('recordTypes -> LPAREN parameters RPAREN','recordTypes',3,'p_recordTypes','sintactico.py',199),
  ('recordTypes -> LPAREN LBRACE recordTypeAnnotation RBRACE RPAREN','recordTypes',5,'p_recordTypes','sintactico.py',200),
  ('recordTypeAnnotation -> datatype VARIABLE COMMA recordTypeAnnotation','recordTypeAnnotation',4,'p_recordTypeAnnotation','sintactico.py',205),
  ('recordTypeAnnotation -> datatype VARIABLE','recordTypeAnnotation',2,'p_recordTypeAnnotation','sintactico.py',206),
  ('multipleDatatypes -> datatype COMMA multipleDatatypes','multipleDatatypes',3,'p_multipleDatatypes','sintactico.py',211),
  ('multipleDatatypes -> datatype','multipleDatatypes',1,'p_multipleDatatypes','sintactico.py',212),
  ('variableValuePair -> VARIABLE COLON value','variableValuePair',3,'p_variableValuePair','sintactico.py',217),
  ('tuple -> LPAREN values RPAREN','tuple',3,'p_tuple','sintactico.py',222),
]
