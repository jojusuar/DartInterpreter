
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ACCEPT_NULL AND_ASSIGN AS ASSERT ASSIGN ASYNC AWAIT BASE BITWISE_AND BITWISE_OR BITWISE_XOR BOOL_TYPE BREAK CASE CATCH CLASS COLON COMMA COMMENT CONST CONTINUE COVARIANT DEFAULT DEFERRED DIVIDE DIV_ASSIGN DO DOLLAR DOT DOUBLE DOUBLE_TYPE DYNAMIC ELSE ENUM EQUALS EXPORT EXTENDS EXTENSION EXTERNAL FACTORY FALSE FINAL FINALLY FOR FUNCTION GET HIDE IF IF_NULL IMPLEMENTS IMPORT IN INTEGER INTERFACE INT_TYPE IS LATE LBRACE LBRACKET LESS_EQUAL LESS_THAN LIBRARY LIST_TYPE LOGICAL_AND LOGICAL_OR LPAREN LSHIFT_ASSIGN MAP_TYPE MINUS MIXIN MOD MOD_ASSIGN MORE_EQUAL MORE_THAN MULTILINE_COMMENT MUL_ASSIGN NEW NOT NOT_EQUAL NULL NUM_TYPE OF ON OPERATOR OR_ASSIGN PART PLUS RBRACE RBRACKET REQUIRED RETHROW RETURN RPAREN RSHIFT_ASSIGN RUNES_TYPE RUNSIGNED_SHIFT_ASSIGN SEALED SEMICOLON SET SET_TYPE SHOW STATIC STRING STRING_TYPE SUB_ASSIGN SUM_ASSIGN SUPER SWITCH SYMBOL_TYPE SYNC THIS THROW TIMES TRUE TRY TYPE TYPEDEF VARIABLE VAR_TYPE VOID WHEN WHILE WITH XOR_ASSIGN YIELD\n    body : instruction SEMICOLON body\n         | instruction SEMICOLON\n         | noSemicolonStructure body\n         | noSemicolonStructure\n    \n    noSemicolonStructure : dataStructure\n                         | functionDeclaration\n    \n    dataStructure : if\n    \n    if : IF LPAREN value RPAREN LBRACE body RBRACE\n    \n    import : IMPORT STRING\n    \n    instruction : functionCall\n                | variableDeclarationUninitialized\n                | variableDeclarationInitialized\n                | variableMutation\n                | import\n    \n    non_nullable_datatype : INT_TYPE\n             | DOUBLE_TYPE\n             | NUM_TYPE\n             | BOOL_TYPE\n             | STRING_TYPE\n             | LIST_TYPE\n             | MAP_TYPE\n             | SET_TYPE\n             | RUNES_TYPE\n             | SYMBOL_TYPE\n             | VAR_TYPE\n    \n    nullable_datatype : non_nullable_datatype ACCEPT_NULL\n    \n    datatype : nullable_datatype\n             | non_nullable_datatype\n             | recordTypes\n    \n    variableDeclarationUninitialized : datatype VARIABLE\n    \n    variableInitialization : ASSIGN value\n                           | ASSIGN functionCall\n    \n    variableDeclarationInitialized : variableDeclarationUninitialized variableInitialization\n    \n    immediateAssign : SUM_ASSIGN\n                    | SUB_ASSIGN\n                    | MUL_ASSIGN\n                    | DIV_ASSIGN\n                    | MOD_ASSIGN\n                    | AND_ASSIGN\n                    | OR_ASSIGN\n                    | XOR_ASSIGN\n                    | LSHIFT_ASSIGN\n                    | RSHIFT_ASSIGN\n                    | RUNSIGNED_SHIFT_ASSIGN\n    \n    variableMutation : VARIABLE variableInitialization\n                     | VARIABLE immediateAssign value\n    \n    functionCall : prototype    \n                 | VARIABLE DOT prototype\n    \n    functionDeclaration : datatype VARIABLE LPAREN parameters RPAREN LBRACE body RBRACE\n    \n    parameters : datatype VARIABLE COMMA parameters\n               | datatype VARIABLE\n    \n    values : value COMMA values\n           | value\n    \n    prototype : VARIABLE LPAREN values RPAREN\n              | VARIABLE LPAREN RPAREN\n    \n    object : NEW prototype\n    \n    boolean : TRUE\n            | FALSE\n    \n    number : INTEGER\n           | DOUBLE\n    \n    arithmeticOperator : PLUS\n                       | MINUS\n                       | TIMES\n                       | DIVIDE\n                       | MOD\n    \n    logicOperator : LOGICAL_AND\n                  | LOGICAL_OR\n    \n    bitwiseOperator : BITWISE_AND\n                    | BITWISE_OR\n                    | BITWISE_XOR\n    \n    comparator : EQUALS\n               | LESS_THAN\n               | MORE_THAN\n               | LESS_EQUAL\n               | MORE_EQUAL\n    \n    value : number\n          | MINUS number\n          | object\n          | arithmeticExpression\n          | MINUS LPAREN arithmeticExpression RPAREN\n          | bitwiseExpression\n          | MINUS LPAREN bitwiseExpression RPAREN\n          | logicExpression\n          | NOT LPAREN logicExpression RPAREN\n          | STRING\n          | VARIABLE\n          | NOT VARIABLE\n          | boolean\n          | NOT boolean\n          | variableValuePair\n          | tuple\n          | comparison\n          | NOT LPAREN comparison RPAREN\n    \n    comparison : value comparator value\n               | LPAREN value comparator value RPAREN\n    \n    logicExpression : value logicOperator value\n                    | LPAREN value logicOperator value RPAREN\n    \n    arithmeticExpression : value arithmeticOperator value\n                         | LPAREN value arithmeticOperator value RPAREN\n    \n    bitwiseExpression : value bitwiseOperator value\n                      | LPAREN value bitwiseOperator value RPAREN\n    \n    recordTypes : LPAREN multipleDatatypes RPAREN\n                | LPAREN parameters RPAREN\n                | LPAREN LBRACE recordTypeAnnotation RBRACE RPAREN\n    \n    recordTypeAnnotation : datatype VARIABLE COMMA recordTypeAnnotation\n                         | datatype VARIABLE\n    \n    multipleDatatypes : datatype COMMA multipleDatatypes\n                      | datatype\n    \n    variableValuePair : VARIABLE COLON value\n    \n    tuple : LPAREN values RPAREN\n    '
    
_lr_action_items = {'VARIABLE':([0,3,9,10,13,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,56,57,58,66,69,78,89,90,92,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,122,125,126,141,142,143,144,146,153,156,166,174,175,],[12,12,-5,-6,51,-7,-27,-28,-29,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,12,71,81,83,83,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,94,-26,83,83,120,81,-102,-103,129,83,83,83,83,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,83,83,83,83,94,83,83,83,83,83,-104,12,12,-8,-49,]),'IMPORT':([0,3,9,10,15,32,156,166,174,175,],[14,14,-5,-6,-7,14,14,14,-8,-49,]),'IF':([0,3,9,10,15,32,156,166,174,175,],[20,20,-5,-6,-7,20,20,20,-8,-49,]),'INT_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[21,21,-5,-6,-7,21,21,21,21,21,21,21,21,21,-8,-49,]),'DOUBLE_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[22,22,-5,-6,-7,22,22,22,22,22,22,22,22,22,-8,-49,]),'NUM_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[23,23,-5,-6,-7,23,23,23,23,23,23,23,23,23,-8,-49,]),'BOOL_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[24,24,-5,-6,-7,24,24,24,24,24,24,24,24,24,-8,-49,]),'STRING_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[25,25,-5,-6,-7,25,25,25,25,25,25,25,25,25,-8,-49,]),'LIST_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[26,26,-5,-6,-7,26,26,26,26,26,26,26,26,26,-8,-49,]),'MAP_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[27,27,-5,-6,-7,27,27,27,27,27,27,27,27,27,-8,-49,]),'SET_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[28,28,-5,-6,-7,28,28,28,28,28,28,28,28,28,-8,-49,]),'RUNES_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[29,29,-5,-6,-7,29,29,29,29,29,29,29,29,29,-8,-49,]),'SYMBOL_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[30,30,-5,-6,-7,30,30,30,30,30,30,30,30,30,-8,-49,]),'VAR_TYPE':([0,3,9,10,15,16,32,55,88,93,132,154,156,166,174,175,],[31,31,-5,-6,-7,31,31,31,31,31,31,31,31,31,-8,-49,]),'LPAREN':([0,3,9,10,12,15,16,20,32,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,58,63,66,69,71,81,88,93,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,122,125,132,141,142,143,144,146,154,156,166,174,175,],[16,16,-5,-6,39,-7,16,58,16,66,66,66,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,88,16,66,116,66,119,39,39,16,16,66,66,66,66,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,66,146,66,66,16,66,66,66,66,66,16,16,16,-8,-49,]),'$end':([1,3,9,10,15,32,33,59,174,175,],[0,-4,-5,-6,-7,-2,-3,-1,-8,-49,]),'SEMICOLON':([2,4,5,6,7,8,11,34,37,51,52,60,61,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,82,83,84,86,115,120,121,123,124,134,135,136,137,145,150,157,158,164,165,169,170,171,172,],[32,-10,-11,-12,-13,-14,-47,-33,-45,-30,-9,-31,-32,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-48,-86,-46,-55,-77,-87,-89,-56,-54,-98,-100,-96,-94,-110,-109,-80,-82,-84,-93,-99,-101,-97,-95,]),'RBRACE':([3,9,10,15,32,33,59,91,129,167,168,173,174,175,],[-4,-5,-6,-7,-2,-3,-1,128,-106,-105,174,175,-8,-49,]),'ASSIGN':([5,12,51,],[35,35,-30,]),'DOT':([12,71,],[36,36,]),'SUM_ASSIGN':([12,],[40,]),'SUB_ASSIGN':([12,],[41,]),'MUL_ASSIGN':([12,],[42,]),'DIV_ASSIGN':([12,],[43,]),'MOD_ASSIGN':([12,],[44,]),'AND_ASSIGN':([12,],[45,]),'OR_ASSIGN':([12,],[46,]),'XOR_ASSIGN':([12,],[47,]),'LSHIFT_ASSIGN':([12,],[48,]),'RSHIFT_ASSIGN':([12,],[49,]),'RUNSIGNED_SHIFT_ASSIGN':([12,],[50,]),'STRING':([14,35,38,39,40,41,42,43,44,45,46,47,48,49,50,58,66,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,122,125,141,142,143,144,146,],[52,70,70,70,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,70,70,70,70,70,70,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,70,70,70,70,70,70,70,70,70,]),'LBRACE':([16,133,152,],[55,156,166,]),'COMMA':([17,18,19,21,22,23,24,25,26,27,28,29,30,31,56,57,62,64,65,67,68,70,72,73,74,75,76,77,79,80,83,86,87,89,90,94,115,117,120,121,123,124,129,130,134,135,136,137,145,150,153,157,158,159,160,161,162,163,164,165,169,170,171,172,],[-27,-28,-29,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,93,-26,-76,-78,-79,-81,-83,-85,-88,-90,-91,-92,-59,-60,-57,-58,-86,-55,125,-102,-103,132,-77,125,-87,-89,-56,-54,154,93,-98,-100,-96,-94,-110,-109,-104,-80,-82,-98,-100,-96,-94,125,-84,-93,-99,-101,-97,-95,]),'RPAREN':([17,18,19,21,22,23,24,25,26,27,28,29,30,31,39,53,54,56,57,62,64,65,67,68,70,72,73,74,75,76,77,79,80,83,85,86,87,89,90,94,95,115,117,118,120,121,123,124,127,128,130,131,134,135,136,137,138,139,145,147,148,150,151,153,155,157,158,159,160,161,162,163,164,165,169,170,171,172,],[-27,-28,-29,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,86,89,90,-108,-26,-76,-78,-79,-81,-83,-85,-88,-90,-91,-92,-59,-60,-57,-58,-86,124,-55,-53,-102,-103,-51,133,-77,-53,145,-87,-89,-56,-54,152,153,-108,-107,-98,-100,-96,-94,157,158,-110,164,165,-109,-52,-104,-50,-80,-82,169,170,171,172,-53,-84,-93,-99,-101,-97,-95,]),'ACCEPT_NULL':([18,21,22,23,24,25,26,27,28,29,30,31,],[57,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,]),'MINUS':([35,38,39,40,41,42,43,44,45,46,47,48,49,50,58,60,62,64,65,66,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,123,124,125,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[63,63,63,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,63,101,-76,-78,-79,63,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,101,-55,101,101,63,63,63,63,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,-77,63,101,63,-87,-89,63,-56,-54,63,101,101,101,101,-79,-81,101,63,63,63,63,-110,63,-83,-92,101,101,-80,-82,101,101,101,101,101,-84,-93,-99,-101,-97,-95,]),'NOT':([35,38,39,40,41,42,43,44,45,46,47,48,49,50,58,66,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,122,125,141,142,143,144,146,],[69,69,69,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,69,69,69,69,69,69,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,69,69,69,69,69,69,69,69,69,]),'INTEGER':([35,38,39,40,41,42,43,44,45,46,47,48,49,50,58,63,66,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,122,125,141,142,143,144,146,],[76,76,76,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,76,76,76,76,76,76,76,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,76,76,76,76,76,76,76,76,76,]),'DOUBLE':([35,38,39,40,41,42,43,44,45,46,47,48,49,50,58,63,66,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,122,125,141,142,143,144,146,],[77,77,77,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,77,77,77,77,77,77,77,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,77,77,77,77,77,77,77,77,77,]),'NEW':([35,38,39,40,41,42,43,44,45,46,47,48,49,50,58,66,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,122,125,141,142,143,144,146,],[78,78,78,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,78,78,78,78,78,78,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,78,78,78,78,78,78,78,78,78,]),'TRUE':([35,38,39,40,41,42,43,44,45,46,47,48,49,50,58,66,69,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,122,125,141,142,143,144,146,],[79,79,79,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,79,79,79,79,79,79,79,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,79,79,79,79,79,79,79,79,79,]),'FALSE':([35,38,39,40,41,42,43,44,45,46,47,48,49,50,58,66,69,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,122,125,141,142,143,144,146,],[80,80,80,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,80,80,80,80,80,80,80,-61,-62,-63,-64,-65,-68,-69,-70,-66,-67,-71,-72,-73,-74,-75,80,80,80,80,80,80,80,80,80,]),'PLUS':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[100,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,100,-55,100,100,-77,100,-87,-89,-56,-54,100,100,100,100,-79,-81,100,-110,-83,-92,100,100,-80,-82,100,100,100,100,100,-84,-93,-99,-101,-97,-95,]),'TIMES':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[102,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,102,-55,102,102,-77,102,-87,-89,-56,-54,102,102,102,102,-79,-81,102,-110,-83,-92,102,102,-80,-82,102,102,102,102,102,-84,-93,-99,-101,-97,-95,]),'DIVIDE':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[103,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,103,-55,103,103,-77,103,-87,-89,-56,-54,103,103,103,103,-79,-81,103,-110,-83,-92,103,103,-80,-82,103,103,103,103,103,-84,-93,-99,-101,-97,-95,]),'MOD':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[104,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,104,-55,104,104,-77,104,-87,-89,-56,-54,104,104,104,104,-79,-81,104,-110,-83,-92,104,104,-80,-82,104,104,104,104,104,-84,-93,-99,-101,-97,-95,]),'BITWISE_AND':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[105,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,105,-55,105,105,-77,105,-87,-89,-56,-54,105,105,105,105,-79,-81,105,-110,-83,-92,105,105,-80,-82,105,105,105,105,105,-84,-93,-99,-101,-97,-95,]),'BITWISE_OR':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[106,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,106,-55,106,106,-77,106,-87,-89,-56,-54,106,106,106,106,-79,-81,106,-110,-83,-92,106,106,-80,-82,106,106,106,106,106,-84,-93,-99,-101,-97,-95,]),'BITWISE_XOR':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[107,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,107,-55,107,107,-77,107,-87,-89,-56,-54,107,107,107,107,-79,-81,107,-110,-83,-92,107,107,-80,-82,107,107,107,107,107,-84,-93,-99,-101,-97,-95,]),'LOGICAL_AND':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[108,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,108,-55,108,108,-77,108,-87,-89,-56,-54,108,108,108,108,-79,-81,108,-110,-83,-92,108,108,-80,-82,108,108,108,108,108,-84,-93,-99,-101,-97,-95,]),'LOGICAL_OR':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[109,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,109,-55,109,109,-77,109,-87,-89,-56,-54,109,109,109,109,-79,-81,109,-110,-83,-92,109,109,-80,-82,109,109,109,109,109,-84,-93,-99,-101,-97,-95,]),'EQUALS':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[110,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,110,-55,110,110,-77,110,-87,-89,-56,-54,110,110,110,110,-79,-81,110,-110,-83,-92,110,110,-80,-82,110,110,110,110,110,-84,-93,-99,-101,-97,-95,]),'LESS_THAN':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[111,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,111,-55,111,111,-77,111,-87,-89,-56,-54,111,111,111,111,-79,-81,111,-110,-83,-92,111,111,-80,-82,111,111,111,111,111,-84,-93,-99,-101,-97,-95,]),'MORE_THAN':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[112,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,112,-55,112,112,-77,112,-87,-89,-56,-54,112,112,112,112,-79,-81,112,-110,-83,-92,112,112,-80,-82,112,112,112,112,112,-84,-93,-99,-101,-97,-95,]),'LESS_EQUAL':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[113,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,113,-55,113,113,-77,113,-87,-89,-56,-54,113,113,113,113,-79,-81,113,-110,-83,-92,113,113,-80,-82,113,113,113,113,113,-84,-93,-99,-101,-97,-95,]),'MORE_EQUAL':([60,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,83,84,86,87,95,115,117,120,121,123,124,134,135,136,137,138,139,140,145,147,148,149,150,157,158,159,160,161,162,163,164,165,169,170,171,172,],[114,-76,-78,-79,-81,-83,-85,-86,-88,-90,-91,-92,-59,-60,-57,-58,-86,114,-55,114,114,-77,114,-87,-89,-56,-54,114,114,114,114,-79,-81,114,-110,-83,-92,114,114,-80,-82,114,114,114,114,114,-84,-93,-99,-101,-97,-95,]),'COLON':([71,83,],[122,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,3,32,156,166,],[1,33,59,168,173,]),'instruction':([0,3,32,156,166,],[2,2,2,2,2,]),'noSemicolonStructure':([0,3,32,156,166,],[3,3,3,3,3,]),'functionCall':([0,3,32,35,156,166,],[4,4,4,61,4,4,]),'variableDeclarationUninitialized':([0,3,32,156,166,],[5,5,5,5,5,]),'variableDeclarationInitialized':([0,3,32,156,166,],[6,6,6,6,6,]),'variableMutation':([0,3,32,156,166,],[7,7,7,7,7,]),'import':([0,3,32,156,166,],[8,8,8,8,8,]),'dataStructure':([0,3,32,156,166,],[9,9,9,9,9,]),'functionDeclaration':([0,3,32,156,166,],[10,10,10,10,10,]),'prototype':([0,3,32,35,36,78,156,166,],[11,11,11,11,82,123,11,11,]),'datatype':([0,3,16,32,55,88,93,132,154,156,166,],[13,13,56,13,92,126,130,126,92,13,13,]),'if':([0,3,32,156,166,],[15,15,15,15,15,]),'nullable_datatype':([0,3,16,32,55,88,93,132,154,156,166,],[17,17,17,17,17,17,17,17,17,17,17,]),'non_nullable_datatype':([0,3,16,32,55,88,93,132,154,156,166,],[18,18,18,18,18,18,18,18,18,18,18,]),'recordTypes':([0,3,16,32,55,88,93,132,154,156,166,],[19,19,19,19,19,19,19,19,19,19,19,]),'variableInitialization':([5,12,],[34,37,]),'immediateAssign':([12,],[38,]),'multipleDatatypes':([16,93,],[53,131,]),'parameters':([16,88,132,],[54,127,155,]),'value':([35,38,39,58,66,96,97,98,99,116,119,122,125,141,142,143,144,146,],[60,84,87,95,117,134,135,136,137,140,149,150,87,159,160,161,162,163,]),'number':([35,38,39,58,63,66,96,97,98,99,116,119,122,125,141,142,143,144,146,],[62,62,62,62,115,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'object':([35,38,39,58,66,96,97,98,99,116,119,122,125,141,142,143,144,146,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'arithmeticExpression':([35,38,39,58,66,96,97,98,99,116,119,122,125,141,142,143,144,146,],[65,65,65,65,65,65,65,65,65,138,65,65,65,65,65,65,65,65,]),'bitwiseExpression':([35,38,39,58,66,96,97,98,99,116,119,122,125,141,142,143,144,146,],[67,67,67,67,67,67,67,67,67,139,67,67,67,67,67,67,67,67,]),'logicExpression':([35,38,39,58,66,96,97,98,99,116,119,122,125,141,142,143,144,146,],[68,68,68,68,68,68,68,68,68,68,147,68,68,68,68,68,68,68,]),'boolean':([35,38,39,58,66,69,96,97,98,99,116,119,122,125,141,142,143,144,146,],[72,72,72,72,72,121,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'variableValuePair':([35,38,39,58,66,96,97,98,99,116,119,122,125,141,142,143,144,146,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'tuple':([35,38,39,58,66,96,97,98,99,116,119,122,125,141,142,143,144,146,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'comparison':([35,38,39,58,66,96,97,98,99,116,119,122,125,141,142,143,144,146,],[75,75,75,75,75,75,75,75,75,75,148,75,75,75,75,75,75,75,]),'values':([39,66,125,146,],[85,118,151,118,]),'recordTypeAnnotation':([55,154,],[91,167,]),'arithmeticOperator':([60,84,87,95,117,134,135,136,137,140,149,150,159,160,161,162,163,],[96,96,96,96,141,96,96,96,96,96,96,96,96,96,96,96,141,]),'bitwiseOperator':([60,84,87,95,117,134,135,136,137,140,149,150,159,160,161,162,163,],[97,97,97,97,142,97,97,97,97,97,97,97,97,97,97,97,142,]),'logicOperator':([60,84,87,95,117,134,135,136,137,140,149,150,159,160,161,162,163,],[98,98,98,98,143,98,98,98,98,98,98,98,98,98,98,98,143,]),'comparator':([60,84,87,95,117,134,135,136,137,140,149,150,159,160,161,162,163,],[99,99,99,99,144,99,99,99,99,99,99,99,99,99,99,99,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> instruction SEMICOLON body','body',3,'p_body','sintactico.py',6),
  ('body -> instruction SEMICOLON','body',2,'p_body','sintactico.py',7),
  ('body -> noSemicolonStructure body','body',2,'p_body','sintactico.py',8),
  ('body -> noSemicolonStructure','body',1,'p_body','sintactico.py',9),
  ('noSemicolonStructure -> dataStructure','noSemicolonStructure',1,'p_noSemicolonStructure','sintactico.py',14),
  ('noSemicolonStructure -> functionDeclaration','noSemicolonStructure',1,'p_noSemicolonStructure','sintactico.py',15),
  ('dataStructure -> if','dataStructure',1,'p_dataStructure','sintactico.py',20),
  ('if -> IF LPAREN value RPAREN LBRACE body RBRACE','if',7,'p_if','sintactico.py',25),
  ('import -> IMPORT STRING','import',2,'p_import','sintactico.py',30),
  ('instruction -> functionCall','instruction',1,'p_instruction','sintactico.py',35),
  ('instruction -> variableDeclarationUninitialized','instruction',1,'p_instruction','sintactico.py',36),
  ('instruction -> variableDeclarationInitialized','instruction',1,'p_instruction','sintactico.py',37),
  ('instruction -> variableMutation','instruction',1,'p_instruction','sintactico.py',38),
  ('instruction -> import','instruction',1,'p_instruction','sintactico.py',39),
  ('non_nullable_datatype -> INT_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',44),
  ('non_nullable_datatype -> DOUBLE_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',45),
  ('non_nullable_datatype -> NUM_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',46),
  ('non_nullable_datatype -> BOOL_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',47),
  ('non_nullable_datatype -> STRING_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',48),
  ('non_nullable_datatype -> LIST_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',49),
  ('non_nullable_datatype -> MAP_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',50),
  ('non_nullable_datatype -> SET_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',51),
  ('non_nullable_datatype -> RUNES_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',52),
  ('non_nullable_datatype -> SYMBOL_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',53),
  ('non_nullable_datatype -> VAR_TYPE','non_nullable_datatype',1,'p_non_nullable_datatype','sintactico.py',54),
  ('nullable_datatype -> non_nullable_datatype ACCEPT_NULL','nullable_datatype',2,'p_nullable_datatype','sintactico.py',59),
  ('datatype -> nullable_datatype','datatype',1,'p_datatype','sintactico.py',64),
  ('datatype -> non_nullable_datatype','datatype',1,'p_datatype','sintactico.py',65),
  ('datatype -> recordTypes','datatype',1,'p_datatype','sintactico.py',66),
  ('variableDeclarationUninitialized -> datatype VARIABLE','variableDeclarationUninitialized',2,'p_variableDeclarationUninitialized','sintactico.py',71),
  ('variableInitialization -> ASSIGN value','variableInitialization',2,'p_variableInitialization','sintactico.py',76),
  ('variableInitialization -> ASSIGN functionCall','variableInitialization',2,'p_variableInitialization','sintactico.py',77),
  ('variableDeclarationInitialized -> variableDeclarationUninitialized variableInitialization','variableDeclarationInitialized',2,'p_variableDeclarationInitialized','sintactico.py',82),
  ('immediateAssign -> SUM_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',87),
  ('immediateAssign -> SUB_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',88),
  ('immediateAssign -> MUL_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',89),
  ('immediateAssign -> DIV_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',90),
  ('immediateAssign -> MOD_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',91),
  ('immediateAssign -> AND_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',92),
  ('immediateAssign -> OR_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',93),
  ('immediateAssign -> XOR_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',94),
  ('immediateAssign -> LSHIFT_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',95),
  ('immediateAssign -> RSHIFT_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',96),
  ('immediateAssign -> RUNSIGNED_SHIFT_ASSIGN','immediateAssign',1,'p_immediateAssign','sintactico.py',97),
  ('variableMutation -> VARIABLE variableInitialization','variableMutation',2,'p_variableMutation','sintactico.py',102),
  ('variableMutation -> VARIABLE immediateAssign value','variableMutation',3,'p_variableMutation','sintactico.py',103),
  ('functionCall -> prototype','functionCall',1,'p_functionCall','sintactico.py',108),
  ('functionCall -> VARIABLE DOT prototype','functionCall',3,'p_functionCall','sintactico.py',109),
  ('functionDeclaration -> datatype VARIABLE LPAREN parameters RPAREN LBRACE body RBRACE','functionDeclaration',8,'p_functionDeclaration','sintactico.py',114),
  ('parameters -> datatype VARIABLE COMMA parameters','parameters',4,'p_parameters','sintactico.py',119),
  ('parameters -> datatype VARIABLE','parameters',2,'p_parameters','sintactico.py',120),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',125),
  ('values -> value','values',1,'p_values','sintactico.py',126),
  ('prototype -> VARIABLE LPAREN values RPAREN','prototype',4,'p_prototype','sintactico.py',131),
  ('prototype -> VARIABLE LPAREN RPAREN','prototype',3,'p_prototype','sintactico.py',132),
  ('object -> NEW prototype','object',2,'p_object','sintactico.py',137),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',142),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',143),
  ('number -> INTEGER','number',1,'p_number','sintactico.py',148),
  ('number -> DOUBLE','number',1,'p_number','sintactico.py',149),
  ('arithmeticOperator -> PLUS','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',154),
  ('arithmeticOperator -> MINUS','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',155),
  ('arithmeticOperator -> TIMES','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',156),
  ('arithmeticOperator -> DIVIDE','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',157),
  ('arithmeticOperator -> MOD','arithmeticOperator',1,'p_arithmeticOperator','sintactico.py',158),
  ('logicOperator -> LOGICAL_AND','logicOperator',1,'p_logicOperator','sintactico.py',163),
  ('logicOperator -> LOGICAL_OR','logicOperator',1,'p_logicOperator','sintactico.py',164),
  ('bitwiseOperator -> BITWISE_AND','bitwiseOperator',1,'p_bitwiseOperator','sintactico.py',169),
  ('bitwiseOperator -> BITWISE_OR','bitwiseOperator',1,'p_bitwiseOperator','sintactico.py',170),
  ('bitwiseOperator -> BITWISE_XOR','bitwiseOperator',1,'p_bitwiseOperator','sintactico.py',171),
  ('comparator -> EQUALS','comparator',1,'p_comparator','sintactico.py',176),
  ('comparator -> LESS_THAN','comparator',1,'p_comparator','sintactico.py',177),
  ('comparator -> MORE_THAN','comparator',1,'p_comparator','sintactico.py',178),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','sintactico.py',179),
  ('comparator -> MORE_EQUAL','comparator',1,'p_comparator','sintactico.py',180),
  ('value -> number','value',1,'p_value','sintactico.py',185),
  ('value -> MINUS number','value',2,'p_value','sintactico.py',186),
  ('value -> object','value',1,'p_value','sintactico.py',187),
  ('value -> arithmeticExpression','value',1,'p_value','sintactico.py',188),
  ('value -> MINUS LPAREN arithmeticExpression RPAREN','value',4,'p_value','sintactico.py',189),
  ('value -> bitwiseExpression','value',1,'p_value','sintactico.py',190),
  ('value -> MINUS LPAREN bitwiseExpression RPAREN','value',4,'p_value','sintactico.py',191),
  ('value -> logicExpression','value',1,'p_value','sintactico.py',192),
  ('value -> NOT LPAREN logicExpression RPAREN','value',4,'p_value','sintactico.py',193),
  ('value -> STRING','value',1,'p_value','sintactico.py',194),
  ('value -> VARIABLE','value',1,'p_value','sintactico.py',195),
  ('value -> NOT VARIABLE','value',2,'p_value','sintactico.py',196),
  ('value -> boolean','value',1,'p_value','sintactico.py',197),
  ('value -> NOT boolean','value',2,'p_value','sintactico.py',198),
  ('value -> variableValuePair','value',1,'p_value','sintactico.py',199),
  ('value -> tuple','value',1,'p_value','sintactico.py',200),
  ('value -> comparison','value',1,'p_value','sintactico.py',201),
  ('value -> NOT LPAREN comparison RPAREN','value',4,'p_value','sintactico.py',202),
  ('comparison -> value comparator value','comparison',3,'p_comparison','sintactico.py',207),
  ('comparison -> LPAREN value comparator value RPAREN','comparison',5,'p_comparison','sintactico.py',208),
  ('logicExpression -> value logicOperator value','logicExpression',3,'p_logicExpression','sintactico.py',213),
  ('logicExpression -> LPAREN value logicOperator value RPAREN','logicExpression',5,'p_logicExpression','sintactico.py',214),
  ('arithmeticExpression -> value arithmeticOperator value','arithmeticExpression',3,'p_arithmeticExpression','sintactico.py',219),
  ('arithmeticExpression -> LPAREN value arithmeticOperator value RPAREN','arithmeticExpression',5,'p_arithmeticExpression','sintactico.py',220),
  ('bitwiseExpression -> value bitwiseOperator value','bitwiseExpression',3,'p_bitwiseExpression','sintactico.py',225),
  ('bitwiseExpression -> LPAREN value bitwiseOperator value RPAREN','bitwiseExpression',5,'p_bitwiseExpression','sintactico.py',226),
  ('recordTypes -> LPAREN multipleDatatypes RPAREN','recordTypes',3,'p_recordTypes','sintactico.py',231),
  ('recordTypes -> LPAREN parameters RPAREN','recordTypes',3,'p_recordTypes','sintactico.py',232),
  ('recordTypes -> LPAREN LBRACE recordTypeAnnotation RBRACE RPAREN','recordTypes',5,'p_recordTypes','sintactico.py',233),
  ('recordTypeAnnotation -> datatype VARIABLE COMMA recordTypeAnnotation','recordTypeAnnotation',4,'p_recordTypeAnnotation','sintactico.py',238),
  ('recordTypeAnnotation -> datatype VARIABLE','recordTypeAnnotation',2,'p_recordTypeAnnotation','sintactico.py',239),
  ('multipleDatatypes -> datatype COMMA multipleDatatypes','multipleDatatypes',3,'p_multipleDatatypes','sintactico.py',244),
  ('multipleDatatypes -> datatype','multipleDatatypes',1,'p_multipleDatatypes','sintactico.py',245),
  ('variableValuePair -> VARIABLE COLON value','variableValuePair',3,'p_variableValuePair','sintactico.py',250),
  ('tuple -> LPAREN values RPAREN','tuple',3,'p_tuple','sintactico.py',255),
]
